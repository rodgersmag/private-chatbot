#!/bin/bash
# Unified Start Script - Starts Ollama + SelfDB together

# Check if first argument is "rebuild-ui"
if [ "$1" = "rebuild-ui" ]; then
    echo "🔨 Rebuilding UI Docker containers..."
    echo ""

    echo "📦 Rebuilding Ollama UI service..."
    docker-compose build ui

    echo "📦 Rebuilding SelfDB frontend service..."
    docker-compose build frontend

    echo ""
    echo "🚀 Restarting UI services..."
    docker-compose up -d ui frontend

    echo ""
    echo "✅ UI containers rebuilt and restarted successfully!"
    echo "🌐 Ollama UI: http://localhost:3050"
    echo "🌐 SelfDB UI: http://localhost:3000"
    exit 0
fi

# Check if first argument is "rebuild-backend"
if [ "$1" = "rebuild-backend" ]; then
    echo "🔨 Rebuilding backend services..."
    echo ""

    echo "📦 Rebuilding SelfDB backend services..."
    docker-compose build backend storage_service

    echo ""
    echo "🚀 Restarting backend services..."
    docker-compose up -d backend storage_service

    echo ""
    echo "✅ Backend services rebuilt and restarted successfully!"
    exit 0
fi

echo "🚀 Setting up Ollama + SelfDB with unified configuration..."
echo ""

# Stop any running containers
echo "🛑 Stopping any existing containers..."
docker-compose down 2>/dev/null || true

# Setup SelfDB environment and keys
echo "🔧 Setting up SelfDB environment..."
./scripts/generate_anon_key.sh

# Generate SECRET_KEY if it's still the default value
echo "🔑 Checking SECRET_KEY..."
if [ -f ".env" ]; then
    # Extract current SECRET_KEY value (ignoring comments)
    CURRENT_SECRET_KEY=$(grep "^SECRET_KEY=" ".env" | cut -d '=' -f2 | cut -d '#' -f1 | tr -d ' ')

    # Check if it's still the default value
    if [ "$CURRENT_SECRET_KEY" = "changeme_super_secret_jwt_key_32_bytes_long" ] || [ -z "$CURRENT_SECRET_KEY" ]; then
        echo "🔄 Generating new SECRET_KEY..."
        # Generate a new 32-byte secret key
        NEW_SECRET_KEY=$(openssl rand -hex 32)

        # Replace the SECRET_KEY line in .env file, preserving the comment
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS version
            sed -i '' "s/^SECRET_KEY=.*/SECRET_KEY=$NEW_SECRET_KEY # <-- Will be auto-generated by start.sh/" ".env"
        else
            # Linux version
            sed -i "s/^SECRET_KEY=.*/SECRET_KEY=$NEW_SECRET_KEY # <-- Will be auto-generated by start.sh/" ".env"
        fi
        echo "✅ New SECRET_KEY generated successfully"
    else
        echo "✅ SECRET_KEY already configured"
    fi
else
    echo "❌ Error: .env file not found"
    exit 1
fi

# Synchronize ANON_KEY with the backend
echo "🔗 Synchronizing ANON_KEY with the backend..."
# Check if ANON_KEY exists in .env file
if [ ! -f ".env" ]; then
    echo "❌ Error: .env file not found. Please run scripts/generate_anon_key.sh first."
    exit 1
fi

ANON_KEY_CHECK=$(grep "^ANON_KEY=" ".env" | cut -d '=' -f2)
if [ -z "$ANON_KEY_CHECK" ]; then
    echo "❌ Error: ANON_KEY not found in .env file. Please run scripts/generate_anon_key.sh first."
    exit 1
fi

echo "✅ Found ANON_KEY in .env file: ${ANON_KEY_CHECK:0:5}..."
echo "✅ ANON_KEY is now synchronized with the backend."

# Source environment variables from .env
source .env

echo ""
echo "📦 Starting all services..."
docker-compose up -d

echo ""
echo "⏳ Waiting for Ollama server to be ready..."
# Wait for Ollama to be healthy
for i in {1..30}; do
    if docker-compose exec -T ollama ollama list >/dev/null 2>&1; then
        echo "✅ Ollama server is ready!"
        break
    fi
    echo -n "."
    sleep 2
done

echo ""
echo "📥 Checking if model ${VITE_DEFAULT_MODEL} is available..."
# Check if model exists
if docker-compose exec -T ollama ollama list | grep -q "${VITE_DEFAULT_MODEL}"; then
    echo "✅ Model ${VITE_DEFAULT_MODEL} already cached!"
else
    echo "📦 Model not found. Downloading ${VITE_DEFAULT_MODEL} (this may take 2-5 minutes on first run)..."
    docker-compose exec -T ollama ollama pull ${VITE_DEFAULT_MODEL}
    echo "✅ Model downloaded successfully!"
fi

echo ""
echo "📊 Available models:"
docker-compose exec -T ollama ollama list

echo ""
echo "⏳ Waiting for SelfDB services to be ready..."
echo "   - Checking PostgreSQL..."
docker-compose exec -T postgres pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} >/dev/null 2>&1 && echo "✅ PostgreSQL ready" || echo "⏳ PostgreSQL starting..."

echo "   - Checking Storage Service..."
for i in {1..20}; do
    if curl -f http://localhost:8001/health >/dev/null 2>&1; then
        echo "✅ Storage Service ready"
        break
    fi
    echo -n "."
    sleep 2
done

echo "   - Checking Backend API..."
for i in {1..30}; do
    if curl -f http://localhost:8000/docs >/dev/null 2>&1; then
        echo "✅ Backend API ready"
        break
    fi
    echo -n "."
    sleep 2
done

echo ""
echo "🔧 Initializing chat tables..."
./scripts/init_chat_tables.sh

echo ""
echo "✨ All services are now running!"
echo ""
echo "🌐 Service URLs:"
echo "   📱 Ollama UI:     http://localhost:3050"
echo "   🗄️  SelfDB UI:     http://localhost:3000"
echo "   🔌 Ollama API:    http://localhost:11434"
echo "   🚀 SelfDB API:    http://localhost:8000"
echo "   💾 Storage API:   http://localhost:8001"
echo "   ⚡ Functions:     http://localhost:8090"
echo ""
echo "🎯 You can now use main.py to interact with the Ollama API:"
echo "   python3 main.py"
echo ""
echo "💡 Next time you run './start-all.sh' it will start in just 10-20 seconds!"
echo ""
echo "🔧 Additional commands:"
echo "   ./start-all.sh rebuild-ui      # Rebuild UI containers"
echo "   ./start-all.sh rebuild-backend # Rebuild backend containers"
echo "   ./stop-all.sh                  # Stop all services"
echo "   ./rebuild-all.sh               # Rebuild all services"
echo "   ./cleanup-all.sh               # Clean up everything (⚠️  DELETES DATA)"
echo "   ./test-selfdb.sh               # Run SelfDB test suite"
echo "   docker-compose logs -f         # View all logs"
echo "   docker-compose down            # Stop all services"